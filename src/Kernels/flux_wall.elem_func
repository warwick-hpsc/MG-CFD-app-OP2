// Copyright 2009, Andrew Corrigan, acorriga@gmu.edu
// This code is from the AIAA-2009-4001 paper

// inline void compute_wall_flux_edge_kernel(
//     const float *variables_b,
//     const float *edge_weight,
//     float *fluxes_b)
    float p_b = variables_b[VAR_DENSITY];

    #ifdef IDIVIDE
    float ip_b = 1.0f / p_b;
    #endif

    float pe_b, pressure_b;
    float3 velocity_b, momentum_b;
    float flux_contribution_i_momentum_x_b[NDIM],
           flux_contribution_i_momentum_y_b[NDIM],
           flux_contribution_i_momentum_z_b[NDIM],
           flux_contribution_i_density_energy_b[NDIM];

    momentum_b.x = variables_b[VAR_MOMENTUM+0];
    momentum_b.y = variables_b[VAR_MOMENTUM+1];
    momentum_b.z = variables_b[VAR_MOMENTUM+2];
    pe_b = variables_b[VAR_DENSITY_ENERGY];

    #ifdef IDIVIDE
    compute_velocity(ip_b, momentum_b, velocity_b);
    #else
    compute_velocity(p_b, momentum_b, velocity_b);
    #endif

    float speed_sqd_b = compute_speed_sqd(velocity_b);
    float speed_b = sqrt(speed_sqd_b);
    pressure_b = compute_pressure(p_b, pe_b, speed_sqd_b);

    #ifdef IDIVIDE
    float speed_of_sound_b = compute_speed_of_sound(ip_b, pressure_b);
    #else
    float speed_of_sound_b = compute_speed_of_sound(p_b, pressure_b);
    #endif

    compute_flux_contribution(p_b, momentum_b, pe_b,
                              pressure_b, velocity_b,
                              flux_contribution_i_momentum_x_b,
                              flux_contribution_i_momentum_y_b,
                              flux_contribution_i_momentum_z_b,
                              flux_contribution_i_density_energy_b);

    float factor_x = 0.5 * edge_weight[0],
           factor_y = 0.5 * edge_weight[1],
           factor_z = 0.5 * edge_weight[2];

    fluxes_b[VAR_DENSITY] +=
          factor_x*(ff_variable[VAR_MOMENTUM+0] + momentum_b.x)
        + factor_y*(ff_variable[VAR_MOMENTUM+1] + momentum_b.y)
        + factor_z*(ff_variable[VAR_MOMENTUM+2] + momentum_b.z);

    fluxes_b[VAR_DENSITY_ENERGY] += 
          factor_x*(ff_flux_contribution_density_energy[0] + flux_contribution_i_density_energy_b[0])
        + factor_y*(ff_flux_contribution_density_energy[1] + flux_contribution_i_density_energy_b[1])
        + factor_z*(ff_flux_contribution_density_energy[2] + flux_contribution_i_density_energy_b[2]);

    fluxes_b[VAR_MOMENTUM + 0] += 
          factor_x*(ff_flux_contribution_momentum_x[0] + flux_contribution_i_momentum_x_b[0])
        + factor_y*(ff_flux_contribution_momentum_x[1] + flux_contribution_i_momentum_x_b[1])
        + factor_z*(ff_flux_contribution_momentum_x[2] + flux_contribution_i_momentum_x_b[2]);

    fluxes_b[VAR_MOMENTUM + 1] += 
          factor_x*(ff_flux_contribution_momentum_y[0] + flux_contribution_i_momentum_y_b[0])
        + factor_y*(ff_flux_contribution_momentum_y[1] + flux_contribution_i_momentum_y_b[1])
        + factor_z*(ff_flux_contribution_momentum_y[2] + flux_contribution_i_momentum_y_b[2]);

    fluxes_b[VAR_MOMENTUM + 2] += 
          factor_x*(ff_flux_contribution_momentum_z[0] + flux_contribution_i_momentum_z_b[0])
        + factor_y*(ff_flux_contribution_momentum_z[1] + flux_contribution_i_momentum_z_b[1])
        + factor_z*(ff_flux_contribution_momentum_z[2] + flux_contribution_i_momentum_z_b[2]);
