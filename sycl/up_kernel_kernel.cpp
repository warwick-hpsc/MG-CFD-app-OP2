//
// auto-generated by op2.py
//

#include <math.h>
#include "const.h"

//user function
class up_kernel_kernel;

//host stub function
void op_par_loop_up_kernel(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2){

  int nargs = 3;
  op_arg args[3];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(17);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[17].name      = name;
  OP_kernels[17].count    += 1;


  int    ninds   = 2;
  int    inds[3] = {-1,0,1};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: up_kernel\n");
  }

  //get plan
  #ifdef OP_PART_SIZE_17
    int part_size = OP_PART_SIZE_17;
  #else
    int part_size = OP_part_size;
  #endif

  int exec_size = op_mpi_halo_exchanges_cuda(set, nargs, args);
  if (exec_size > 0) {

    op_plan *Plan = op_plan_get_stage(name,set,part_size,nargs,args,ninds,inds,OP_STAGE_ALL);

    const int opDat1_up_kernel_stride_OP2CONSTANT = getSetSizeFromOpArg(&arg1);
    const int direct_up_kernel_stride_OP2CONSTANT = getSetSizeFromOpArg(&arg0);
    double *ind_arg0 = (double*)arg1.data_d;
    int *ind_arg1 = (int*)arg2.data_d;
    int *opDat1Map = arg1.map_data_d;
    double *arg0_d = (double*)arg0.data_d;
    int *blkmap = (int *)Plan->blkmap;
    int *offset = (int *)Plan->offset;
    int *nelems = (int *)Plan->nelems;
    int set_size = set->size+set->exec_size;
    //execute plan

    int block_offset = 0;
    for ( int col=0; col<Plan->ncolors; col++ ){
      if (col==Plan->ncolors_core) {
        op_mpi_wait_all_cuda(nargs, args);
      }
      int nthread = 1;

      int nblocks = op2_queue->get_device().get_info<cl::sycl::info::device::max_compute_units>();
      int nblocks2 = Plan->ncolblk[col];
      if (Plan->ncolblk[col] > 0) {
        try {
        op2_queue->wait();
        op2_queue->submit([&](cl::sycl::handler& cgh) {


          //user fun as lambda
          auto up_kernel_gpu = [=]( 
                const double* variable,
                double* variable_above,
                int* up_scratch) {
                variable_above[(VAR_DENSITY)*opDat1_up_kernel_stride_OP2CONSTANT]        += variable[(VAR_DENSITY)*direct_up_kernel_stride_OP2CONSTANT];
                variable_above[(VAR_MOMENTUM+0)*opDat1_up_kernel_stride_OP2CONSTANT]     += variable[(VAR_MOMENTUM+0)*direct_up_kernel_stride_OP2CONSTANT];
                variable_above[(VAR_MOMENTUM+1)*opDat1_up_kernel_stride_OP2CONSTANT]     += variable[(VAR_MOMENTUM+1)*direct_up_kernel_stride_OP2CONSTANT];
                variable_above[(VAR_MOMENTUM+2)*opDat1_up_kernel_stride_OP2CONSTANT]     += variable[(VAR_MOMENTUM+2)*direct_up_kernel_stride_OP2CONSTANT];
                variable_above[(VAR_DENSITY_ENERGY)*opDat1_up_kernel_stride_OP2CONSTANT] += variable[(VAR_DENSITY_ENERGY)*direct_up_kernel_stride_OP2CONSTANT];
                *up_scratch += 1;
            
            };
            
          auto kern = [=](cl::sycl::nd_item<1> item) [[intel::reqd_sub_group_size(SIMD_VEC)]] {


            //get sizes and shift pointers and direct-mapped data

            int blocksPerWG = (nblocks2-1)/item.get_group_range(0)+1;
            for ( int idx=item.get_group_linear_id()*blocksPerWG; idx<(item.get_group_linear_id()+1)*blocksPerWG && idx < nblocks2; idx++ ){
              int blockId = blkmap[idx + block_offset];

              int nelem    = nelems[blockId];
              int offset_b = offset[blockId];


              for ( int n=0; n<nelem; n++ ){
                int map1idx;
                map1idx = opDat1Map[n + offset_b + set_size * 0];


                //user-supplied kernel call
                up_kernel_gpu(&arg0_d[n+offset_b],
                              &ind_arg0[map1idx],
                              &ind_arg1[map1idx*1]);
              }

            }
          };
          cgh.parallel_for<class up_kernel_kernel>(cl::sycl::nd_range<1>(nthread*nblocks,nthread), kern);
        });
        }catch(cl::sycl::exception const &e) {
        std::cout << e.what() << std::endl;exit(-1);
        }

      }
      block_offset += Plan->ncolblk[col];
    }
    OP_kernels[17].transfer  += Plan->transfer;
    OP_kernels[17].transfer2 += Plan->transfer2;
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  op2_queue->wait();
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[17].time     += wall_t2 - wall_t1;
}
