//
// auto-generated by op2.py
//

#include "utils.h"

//user function
class count_non_zeros_kernel;

//host stub function
void op_par_loop_count_non_zeros(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  int*arg1h = (int *)arg1.data;
  int nargs = 2;
  op_arg args[2];

  args[0] = arg0;
  args[1] = arg1;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(24);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[24].name      = name;
  OP_kernels[24].count    += 1;


  if (OP_diags>2) {
    printf(" kernel routine w/o indirection:  count_non_zeros\n");
  }

  int exec_size = op_mpi_halo_exchanges_cuda(set, nargs, args);
  if (exec_size > 0) {

    const int direct_count_non_zeros_stride_OP2CONSTANT = getSetSizeFromOpArg(&arg0);
    //set SYCL execution parameters
    #ifdef OP_BLOCK_SIZE_24
      int nthread = OP_BLOCK_SIZE_24;
    #else
      int nthread = OP_block_size;
    #endif

    int nblocks = 200;

    if (op2_queue->get_device().is_cpu()) {
      nthread = SIMD_VEC;
      nblocks = op2_queue->get_device().get_info<cl::sycl::info::device::max_compute_units>();
    }
    //transfer global reduction data to GPU
    int maxblocks = nblocks;
    int reduct_bytes = 0;
    int reduct_size  = 0;
    reduct_bytes += ROUND_UP(maxblocks*1*sizeof(int));
    reduct_size   = MAX(reduct_size,sizeof(int));
    reallocReductArrays(reduct_bytes);
    reduct_bytes = 0;
    arg1.data   = OP_reduct_h + reduct_bytes;
    arg1.data_d = OP_reduct_d + reduct_bytes;
    int *arg1_d = (int*)arg1.data_d;
    for ( int b=0; b<maxblocks; b++ ){
      for ( int d=0; d<1; d++ ){
        ((int *)arg1.data)[d+b*1] = ZERO_int;
      }
    }
    reduct_bytes += ROUND_UP(maxblocks*1*sizeof(int));
    mvReductArraysToDevice(reduct_bytes);

    double *arg0_d = (double*)arg0.data_d;
    int set_size = set->size+set->exec_size;
    try {
    op2_queue->wait();
    op2_queue->submit([&](cl::sycl::handler& cgh) {
      cl::sycl::accessor<int, 1, cl::sycl::access::mode::read_write,
         cl::sycl::access::target::local> red_int(nthread, cgh);

      //user fun as lambda
      auto count_non_zeros_gpu = [=]( 
            const double* value,
            int* count) {
            for (int v=0; v<NVAR; v++) {
                if (value[(v)*direct_count_non_zeros_stride_OP2CONSTANT] > 0.0) {
                    (*count)++;
                }
            }
        
        };
        
      auto kern = [=](cl::sycl::nd_item<1> item) [[intel::reqd_sub_group_size(SIMD_VEC)]] {
        int arg1_l[1];
        for ( int d=0; d<1; d++ ){
          arg1_l[d]=ZERO_int;
        }

        //process set elements
        for ( int n=item.get_global_linear_id(); n<exec_size; n+=item.get_global_range()[0] ){

          //user-supplied kernel call
          count_non_zeros_gpu(&arg0_d[n],
                              arg1_l);
        }

        //global reductions

        for ( int d=0; d<1; d++ ){
          op_reduction<OP_INC,1>(arg1_d,d+item.get_group_linear_id()*1,arg1_l[d],red_int,item);
        }

      };
      cgh.parallel_for<class count_non_zeros_kernel>(cl::sycl::nd_range<1>(nthread*nblocks,nthread), kern);
    });
    }catch(cl::sycl::exception const &e) {
    std::cout << e.what() << std::endl;exit(-1);
    }
    //transfer global reduction data back to CPU
    mvReductArraysToHost(reduct_bytes);
    for ( int b=0; b<maxblocks; b++ ){
      for ( int d=0; d<1; d++ ){
        arg1h[d] = arg1h[d] + ((int *)arg1.data)[d+b*1];
      }
    }
    arg1.data = (char *)arg1h;
    op_mpi_reduce(&arg1,arg1h);
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  op2_queue->wait();
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[24].time     += wall_t2 - wall_t1;
  OP_kernels[24].transfer += (float)set->size * arg0.size;
}
