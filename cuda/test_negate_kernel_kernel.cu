//
// auto-generated by op2.py
//

#include <math.h>
#include "inlined_funcs.h"
#include "global.h"
#include "config.h"

//user function
__device__ void test_negate_kernel_gpu( 
    double *variables_a,
    double *variables_b,
    double *flux_a,
    double *flux_b,
    int *diff_val) {
  int diff = *diff_val;











  variables_a[VAR_DENSITY] -= diff;
  variables_a[VAR_DENSITY_ENERGY] -= diff;
  variables_a[VAR_MOMENTUM+0] -= diff;
  variables_a[VAR_MOMENTUM+1] -= diff;
  variables_a[VAR_MOMENTUM+2] -= diff;

  variables_b[VAR_DENSITY] -= diff;
  variables_b[VAR_DENSITY_ENERGY] -= diff;
  variables_b[VAR_MOMENTUM+0] -= diff;
  variables_b[VAR_MOMENTUM+1] -= diff;
  variables_b[VAR_MOMENTUM+2] -= diff;


}

// CUDA kernel function
__global__ void op_cuda_test_negate_kernel(
  double *__restrict ind_arg0,
  double *__restrict ind_arg1,
  const int *__restrict opDat0Map,
  const int *arg4,
  int start,
  int end,
  int   set_size) {
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    double arg0_l[5];
    for ( int d=0; d<5; d++ ){
      arg0_l[d] = ZERO_double;
    }
    double arg1_l[5];
    for ( int d=0; d<5; d++ ){
      arg1_l[d] = ZERO_double;
    }
    double arg2_l[5];
    for ( int d=0; d<5; d++ ){
      arg2_l[d] = ZERO_double;
    }
    double arg3_l[5];
    for ( int d=0; d<5; d++ ){
      arg3_l[d] = ZERO_double;
    }
    int map0idx;
    int map1idx;
    map0idx = opDat0Map[n + set_size * 0];
    map1idx = opDat0Map[n + set_size * 1];

    //user-supplied kernel call
    test_negate_kernel_gpu(arg0_l,
                       arg1_l,
                       arg2_l,
                       arg3_l,
                       arg4);
    atomicAdd(&ind_arg0[0+map0idx*5],arg0_l[0]);
    atomicAdd(&ind_arg0[1+map0idx*5],arg0_l[1]);
    atomicAdd(&ind_arg0[2+map0idx*5],arg0_l[2]);
    atomicAdd(&ind_arg0[3+map0idx*5],arg0_l[3]);
    atomicAdd(&ind_arg0[4+map0idx*5],arg0_l[4]);
    atomicAdd(&ind_arg0[0+map1idx*5],arg1_l[0]);
    atomicAdd(&ind_arg0[1+map1idx*5],arg1_l[1]);
    atomicAdd(&ind_arg0[2+map1idx*5],arg1_l[2]);
    atomicAdd(&ind_arg0[3+map1idx*5],arg1_l[3]);
    atomicAdd(&ind_arg0[4+map1idx*5],arg1_l[4]);
    atomicAdd(&ind_arg1[0+map0idx*5],arg2_l[0]);
    atomicAdd(&ind_arg1[1+map0idx*5],arg2_l[1]);
    atomicAdd(&ind_arg1[2+map0idx*5],arg2_l[2]);
    atomicAdd(&ind_arg1[3+map0idx*5],arg2_l[3]);
    atomicAdd(&ind_arg1[4+map0idx*5],arg2_l[4]);
    atomicAdd(&ind_arg1[0+map1idx*5],arg3_l[0]);
    atomicAdd(&ind_arg1[1+map1idx*5],arg3_l[1]);
    atomicAdd(&ind_arg1[2+map1idx*5],arg3_l[2]);
    atomicAdd(&ind_arg1[3+map1idx*5],arg3_l[3]);
    atomicAdd(&ind_arg1[4+map1idx*5],arg3_l[4]);
  }
}


//host stub function
void op_par_loop_test_negate_kernel(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4){

  int*arg4h = (int *)arg4.data;
  int nargs = 5;
  op_arg args[5];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(12);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[12].name      = name;
  OP_kernels[12].count    += 1;


  int    ninds   = 2;
  int    inds[5] = {0,0,1,1,-1};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: test_negate_kernel\n");
  }
  int set_size = op_mpi_halo_exchanges_cuda(set, nargs, args);
  if (set_size > 0) {

    //transfer constants to GPU
    int consts_bytes = 0;
    consts_bytes += ROUND_UP(1*sizeof(int));
    reallocConstArrays(consts_bytes);
    consts_bytes = 0;
    arg4.data   = OP_consts_h + consts_bytes;
    arg4.data_d = OP_consts_d + consts_bytes;
    for ( int d=0; d<1; d++ ){
      ((int *)arg4.data)[d] = arg4h[d];
    }
    consts_bytes += ROUND_UP(1*sizeof(int));
    mvConstArraysToDevice(consts_bytes);

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_12
      int nthread = OP_BLOCK_SIZE_12;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_cuda(nargs, args);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_test_negate_kernel<<<nblocks,nthread>>>(
        (double *)arg0.data_d,
        (double *)arg2.data_d,
        arg0.map_data_d,
        (int*)arg4.data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[12].time     += wall_t2 - wall_t1;
}
