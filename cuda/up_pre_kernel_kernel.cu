//
// auto-generated by op2.py
//

#include <math.h>
#include "const.h"

//user function
__device__ void up_pre_kernel_gpu( 
    double* variable,
    int* up_scratch) {
    variable[VAR_DENSITY] = 0.0;
    variable[VAR_MOMENTUM+0] = 0.0;
    variable[VAR_MOMENTUM+1] = 0.0;
    variable[VAR_MOMENTUM+2] = 0.0;
    variable[VAR_DENSITY_ENERGY] = 0.0;
    *up_scratch = 0;

}

// CUDA kernel function
__global__ void op_cuda_up_pre_kernel(
  double *__restrict ind_arg0,
  int *__restrict ind_arg1,
  const int *__restrict opDat0Map,
  int start,
  int end,
  int   set_size) {
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    int map0idx;
    map0idx = opDat0Map[n + set_size * 0];

    //user-supplied kernel call
    up_pre_kernel_gpu(ind_arg0+map0idx*5,
                  ind_arg1+map0idx*1);
  }
}


//host stub function
void op_par_loop_up_pre_kernel(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  int nargs = 2;
  op_arg args[2];

  args[0] = arg0;
  args[1] = arg1;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(16);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[16].name      = name;
  OP_kernels[16].count    += 1;


  int    ninds   = 2;
  int    inds[2] = {0,1};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: up_pre_kernel\n");
  }
  int set_size = op_mpi_halo_exchanges_cuda(set, nargs, args);
  if (set->size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_16
      int nthread = OP_BLOCK_SIZE_16;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_cuda(nargs, args);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_up_pre_kernel<<<nblocks,nthread>>>(
        (double *)arg0.data_d,
        (int *)arg1.data_d,
        arg0.map_data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[16].time     += wall_t2 - wall_t1;
}
