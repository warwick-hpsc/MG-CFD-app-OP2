//
// auto-generated by op2.py
//

#include <math.h>
#include "const.h"

//user function
__device__ void down_v2_kernel_gpu( 
    const double* coord2a,
    const double* coord2b,
    const double* coord1a,
    const double* coord1b,
    const double* residuals1a,
    const double* residuals1b,
    double* residuals1a_prolonged,
    double* residuals1b_prolonged,
    double* residuals1a_prolonged_wsum,
    double* residuals1b_prolonged_wsum) {







    double dx_a1a2 = coord2a[0] - coord1a[0];
    double dy_a1a2 = coord2a[1] - coord1a[1];
    double dz_a1a2 = coord2a[2] - coord1a[2];
    if (dx_a1a2 == 0.0 && dy_a1a2 == 0.0 && dz_a1a2 == 0.0) {

        residuals1a_prolonged[VAR_DENSITY]        = residuals1a[VAR_DENSITY];
        residuals1a_prolonged[VAR_MOMENTUM+0]     = residuals1a[VAR_MOMENTUM+0];
        residuals1a_prolonged[VAR_MOMENTUM+1]     = residuals1a[VAR_MOMENTUM+1];
        residuals1a_prolonged[VAR_MOMENTUM+2]     = residuals1a[VAR_MOMENTUM+2];
        residuals1a_prolonged[VAR_DENSITY_ENERGY] = residuals1a[VAR_DENSITY_ENERGY];
        *residuals1a_prolonged_wsum = 1.0;
    } else {

        const double idist_a1a2 = 1.0/sqrt(dx_a1a2*dx_a1a2 + dy_a1a2*dy_a1a2 + dz_a1a2*dz_a1a2);
        residuals1a_prolonged[VAR_DENSITY]        += idist_a1a2*residuals1a[VAR_DENSITY];
        residuals1a_prolonged[VAR_MOMENTUM+0]     += idist_a1a2*residuals1a[VAR_MOMENTUM+0];
        residuals1a_prolonged[VAR_MOMENTUM+1]     += idist_a1a2*residuals1a[VAR_MOMENTUM+1];
        residuals1a_prolonged[VAR_MOMENTUM+2]     += idist_a1a2*residuals1a[VAR_MOMENTUM+2];
        residuals1a_prolonged[VAR_DENSITY_ENERGY] += idist_a1a2*residuals1a[VAR_DENSITY_ENERGY];
        *residuals1a_prolonged_wsum += idist_a1a2;

        double dx_b1a2 = coord1b[0] - coord2a[0];
        double dy_b1a2 = coord1b[1] - coord2a[1];
        double dz_b1a2 = coord1b[2] - coord2a[2];

        const double idist_b1a2 = 1.0/sqrt(dx_b1a2*dx_b1a2 + dy_b1a2*dy_b1a2 + dz_b1a2*dz_b1a2);
        residuals1a_prolonged[VAR_DENSITY]        += idist_b1a2*residuals1b[VAR_DENSITY];
        residuals1a_prolonged[VAR_MOMENTUM+0]     += idist_b1a2*residuals1b[VAR_MOMENTUM+0];
        residuals1a_prolonged[VAR_MOMENTUM+1]     += idist_b1a2*residuals1b[VAR_MOMENTUM+1];
        residuals1a_prolonged[VAR_MOMENTUM+2]     += idist_b1a2*residuals1b[VAR_MOMENTUM+2];
        residuals1a_prolonged[VAR_DENSITY_ENERGY] += idist_b1a2*residuals1b[VAR_DENSITY_ENERGY];
        *residuals1a_prolonged_wsum += idist_b1a2;
    }

    double dx_b1b2 = coord2b[0] - coord1b[0];
    double dy_b1b2 = coord2b[1] - coord1b[1];
    double dz_b1b2 = coord2b[2] - coord1b[2];
    if (dx_b1b2 == 0.0 && dy_b1b2 == 0.0 && dz_b1b2 == 0.0) {

        residuals1b_prolonged[VAR_DENSITY]        = residuals1b[VAR_DENSITY];
        residuals1b_prolonged[VAR_MOMENTUM+0]      = residuals1b[VAR_MOMENTUM+0];
        residuals1b_prolonged[VAR_MOMENTUM+1]      = residuals1b[VAR_MOMENTUM+1];
        residuals1b_prolonged[VAR_MOMENTUM+2]      = residuals1b[VAR_MOMENTUM+2];
        residuals1b_prolonged[VAR_DENSITY_ENERGY] = residuals1b[VAR_DENSITY_ENERGY];
        *residuals1b_prolonged_wsum = 1.0;
    } else {

        const double idist_b1b2 = 1.0/sqrt(dx_b1b2*dx_b1b2 + dy_b1b2*dy_b1b2 + dz_b1b2*dz_b1b2);
        residuals1b_prolonged[VAR_DENSITY]        += idist_b1b2*residuals1b[VAR_DENSITY];
        residuals1b_prolonged[VAR_MOMENTUM+0]     += idist_b1b2*residuals1b[VAR_MOMENTUM+0];
        residuals1b_prolonged[VAR_MOMENTUM+1]     += idist_b1b2*residuals1b[VAR_MOMENTUM+1];
        residuals1b_prolonged[VAR_MOMENTUM+2]     += idist_b1b2*residuals1b[VAR_MOMENTUM+2];
        residuals1b_prolonged[VAR_DENSITY_ENERGY] += idist_b1b2*residuals1b[VAR_DENSITY_ENERGY];
        *residuals1b_prolonged_wsum += idist_b1b2;

        double dx_a1b2 = coord1a[0] - coord2b[0];
        double dy_a1b2 = coord1a[1] - coord2b[1];
        double dz_a1b2 = coord1a[2] - coord2b[2];

        const double idist_a1b2 = 1.0/sqrt(dx_a1b2*dx_a1b2 + dy_a1b2*dy_a1b2 + dz_a1b2*dz_a1b2);
        residuals1b_prolonged[VAR_DENSITY]        += idist_a1b2*residuals1b[VAR_DENSITY];
        residuals1b_prolonged[VAR_MOMENTUM+0]     += idist_a1b2*residuals1b[VAR_MOMENTUM+0];
        residuals1b_prolonged[VAR_MOMENTUM+1]     += idist_a1b2*residuals1b[VAR_MOMENTUM+1];
        residuals1b_prolonged[VAR_MOMENTUM+2]     += idist_a1b2*residuals1b[VAR_MOMENTUM+2];
        residuals1b_prolonged[VAR_DENSITY_ENERGY] += idist_a1b2*residuals1b[VAR_DENSITY_ENERGY];
        *residuals1b_prolonged_wsum += idist_a1b2;
    }

}

// CUDA kernel function
__global__ void op_cuda_down_v2_kernel(
  const double *__restrict ind_arg0,
  const double *__restrict ind_arg1,
  const double *__restrict ind_arg2,
  double *__restrict ind_arg3,
  double *__restrict ind_arg4,
  const int *__restrict opDat0Map,
  const int *__restrict opDat2Map,
  int start,
  int end,
  int   set_size) {
  double arg6_l[5];
  double arg7_l[5];
  double arg8_l[1];
  double arg9_l[1];
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    double arg6_l[5];
    for ( int d=0; d<5; d++ ){
      arg6_l[d] = ZERO_double;
    }
    double arg7_l[5];
    for ( int d=0; d<5; d++ ){
      arg7_l[d] = ZERO_double;
    }
    double arg8_l[1];
    for ( int d=0; d<1; d++ ){
      arg8_l[d] = ZERO_double;
    }
    double arg9_l[1];
    for ( int d=0; d<1; d++ ){
      arg9_l[d] = ZERO_double;
    }
    int map0idx;
    int map1idx;
    int map2idx;
    int map3idx;
    map0idx = opDat0Map[n + set_size * 0];
    map1idx = opDat0Map[n + set_size * 1];
    map2idx = opDat2Map[n + set_size * 0];
    map3idx = opDat2Map[n + set_size * 1];

    //user-supplied kernel call
    down_v2_kernel_gpu(ind_arg0+map0idx*3,
                   ind_arg0+map1idx*3,
                   ind_arg1+map2idx*3,
                   ind_arg1+map3idx*3,
                   ind_arg2+map2idx*5,
                   ind_arg2+map3idx*5,
                   arg6_l,
                   arg7_l,
                   arg8_l,
                   arg9_l);
    atomicAdd(&ind_arg3[0+map0idx*5],arg6_l[0]);
    atomicAdd(&ind_arg3[1+map0idx*5],arg6_l[1]);
    atomicAdd(&ind_arg3[2+map0idx*5],arg6_l[2]);
    atomicAdd(&ind_arg3[3+map0idx*5],arg6_l[3]);
    atomicAdd(&ind_arg3[4+map0idx*5],arg6_l[4]);
    atomicAdd(&ind_arg3[0+map1idx*5],arg7_l[0]);
    atomicAdd(&ind_arg3[1+map1idx*5],arg7_l[1]);
    atomicAdd(&ind_arg3[2+map1idx*5],arg7_l[2]);
    atomicAdd(&ind_arg3[3+map1idx*5],arg7_l[3]);
    atomicAdd(&ind_arg3[4+map1idx*5],arg7_l[4]);
    atomicAdd(&ind_arg4[0+map0idx*1],arg8_l[0]);
    atomicAdd(&ind_arg4[0+map1idx*1],arg9_l[0]);
  }
}


//host stub function
void op_par_loop_down_v2_kernel(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9){

  int nargs = 10;
  op_arg args[10];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;
  args[8] = arg8;
  args[9] = arg9;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(20);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[20].name      = name;
  OP_kernels[20].count    += 1;


  int    ninds   = 5;
  int    inds[10] = {0,0,1,1,2,2,3,3,4,4};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: down_v2_kernel\n");
  }
  int set_size = op_mpi_halo_exchanges_cuda(set, nargs, args);
  if (set->size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_20
      int nthread = OP_BLOCK_SIZE_20;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_cuda(nargs, args);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_down_v2_kernel<<<nblocks,nthread>>>(
        (double *)arg0.data_d,
        (double *)arg2.data_d,
        (double *)arg4.data_d,
        (double *)arg6.data_d,
        (double *)arg8.data_d,
        arg0.map_data_d,
        arg2.map_data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[20].time     += wall_t2 - wall_t1;
}
