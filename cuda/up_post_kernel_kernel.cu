//
// auto-generated by op2.py
//

#include <math.h>
#include "const.h"

//user function
__device__ void up_post_kernel_gpu( 
    double* variable,
    const int* up_scratch) {
    double avg = (*up_scratch)==0 ? 1.0 : 1.0 / (double)(*up_scratch);
    variable[VAR_DENSITY] *= avg;
    variable[VAR_MOMENTUM+0] *= avg;
    variable[VAR_MOMENTUM+1] *= avg;
    variable[VAR_MOMENTUM+2] *= avg;
    variable[VAR_DENSITY_ENERGY] *= avg;

}

// CUDA kernel function
__global__ void op_cuda_up_post_kernel(
  double *arg0,
  const int *__restrict arg1,
  int   set_size ) {


  //process set elements
  for ( int n=threadIdx.x+blockIdx.x*blockDim.x; n<set_size; n+=blockDim.x*gridDim.x ){

    //user-supplied kernel call
    up_post_kernel_gpu(arg0+n*5,
                   arg1+n*1);
  }
}


//host stub function
void op_par_loop_up_post_kernel(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  int nargs = 2;
  op_arg args[2];

  args[0] = arg0;
  args[1] = arg1;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(18);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[18].name      = name;
  OP_kernels[18].count    += 1;


  if (OP_diags>2) {
    printf(" kernel routine w/o indirection:  up_post_kernel");
  }

  op_mpi_halo_exchanges_cuda(set, nargs, args);
  if (set->size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_18
      int nthread = OP_BLOCK_SIZE_18;
    #else
      int nthread = OP_block_size;
    #endif

    int nblocks = 200;

    op_cuda_up_post_kernel<<<nblocks,nthread>>>(
      (double *) arg0.data_d,
      (int *) arg1.data_d,
      set->size );
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[18].time     += wall_t2 - wall_t1;
  OP_kernels[18].transfer += (float)set->size * arg0.size * 2.0f;
  OP_kernels[18].transfer += (float)set->size * arg1.size;
}
