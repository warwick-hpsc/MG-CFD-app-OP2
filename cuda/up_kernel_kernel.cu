//
// auto-generated by op2.py
//

#include <math.h>
#include "const.h"

//user function
__device__ void up_kernel_gpu( 
    const double* variable,
    double* variable_above,
    int* up_scratch) {
    variable_above[VAR_DENSITY]        += variable[VAR_DENSITY];
    variable_above[VAR_MOMENTUM+0]     += variable[VAR_MOMENTUM+0];
    variable_above[VAR_MOMENTUM+1]     += variable[VAR_MOMENTUM+1];
    variable_above[VAR_MOMENTUM+2]     += variable[VAR_MOMENTUM+2];
    variable_above[VAR_DENSITY_ENERGY] += variable[VAR_DENSITY_ENERGY];
    *up_scratch += 1;

}

// CUDA kernel function
__global__ void op_cuda_up_kernel(
  double *__restrict ind_arg0,
  int *__restrict ind_arg1,
  const int *__restrict opDat1Map,
  const double *__restrict arg0,
  int start,
  int end,
  int   set_size) {
  double arg1_l[5];
  int arg2_l[1];
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    double arg1_l[5];
    for ( int d=0; d<5; d++ ){
      arg1_l[d] = ZERO_double;
    }
    int arg2_l[1];
    for ( int d=0; d<1; d++ ){
      arg2_l[d] = ZERO_int;
    }
    int map1idx;
    map1idx = opDat1Map[n + set_size * 0];

    //user-supplied kernel call
    up_kernel_gpu(arg0+n*5,
              arg1_l,
              arg2_l);
    atomicAdd(&ind_arg0[0+map1idx*5],arg1_l[0]);
    atomicAdd(&ind_arg0[1+map1idx*5],arg1_l[1]);
    atomicAdd(&ind_arg0[2+map1idx*5],arg1_l[2]);
    atomicAdd(&ind_arg0[3+map1idx*5],arg1_l[3]);
    atomicAdd(&ind_arg0[4+map1idx*5],arg1_l[4]);
    atomicAdd(&ind_arg1[0+map1idx*1],arg2_l[0]);
  }
}


//host stub function
void op_par_loop_up_kernel(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2){

  int nargs = 3;
  op_arg args[3];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(17);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[17].name      = name;
  OP_kernels[17].count    += 1;


  int    ninds   = 2;
  int    inds[3] = {-1,0,1};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: up_kernel\n");
  }
  int set_size = op_mpi_halo_exchanges_cuda(set, nargs, args);
  if (set->size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_17
      int nthread = OP_BLOCK_SIZE_17;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_cuda(nargs, args);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_up_kernel<<<nblocks,nthread>>>(
        (double *)arg1.data_d,
        (int *)arg2.data_d,
        arg1.map_data_d,
        (double*)arg0.data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[17].time     += wall_t2 - wall_t1;
}
