//
// auto-generated by op2.py
//

#include <math.h>
#include "const.h"

void up_kernel_omp4_kernel(
  double *data0,
  int dat0size,
  int *map1,
  int map1size,
  double *data1,
  int dat1size,
  int *data2,
  int dat2size,
  int *col_reord,
  int set_size1,
  int start,
  int end,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size])\
    map(to:col_reord[0:set_size1],map1[0:map1size],data1[0:dat1size],data2[0:dat2size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int e=start; e<end; e++ ){
    int n_op = col_reord[e];
    int map1idx;
    map1idx = map1[n_op + set_size1 * 0];

    //variable mapping
    const double* variable = &data0[5*n_op];
    double* variable_above = &data1[5 * map1idx];
    int* up_scratch = &data2[1 * map1idx];

    //inline function
    
      variable_above[VAR_DENSITY]        += variable[VAR_DENSITY];
      variable_above[VAR_MOMENTUM+0]     += variable[VAR_MOMENTUM+0];
      variable_above[VAR_MOMENTUM+1]     += variable[VAR_MOMENTUM+1];
      variable_above[VAR_MOMENTUM+2]     += variable[VAR_MOMENTUM+2];
      variable_above[VAR_DENSITY_ENERGY] += variable[VAR_DENSITY_ENERGY];
      *up_scratch += 1;
    //end inline func
  }

}
