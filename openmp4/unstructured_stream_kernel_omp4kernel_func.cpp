//
// auto-generated by op2.py
//

void unstructured_stream_kernel_omp4_kernel(
  int *map0,
  int map0size,
  double *data2,
  int dat2size,
  double *data0,
  int dat0size,
  double *data3,
  int dat3size,
  int *col_reord,
  int set_size1,
  int start,
  int end,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data2[0:dat2size])\
    map(to:col_reord[0:set_size1],map0[0:map0size],data0[0:dat0size],data3[0:dat3size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int e=start; e<end; e++ ){
    int n_op = col_reord[e];
    int map0idx;
    int map1idx;
    map0idx = map0[n_op + set_size1 * 0];
    map1idx = map0[n_op + set_size1 * 1];

    //variable mapping
    const double *variables_a = &data0[5 * map0idx];
    const double *variables_b = &data0[5 * map1idx];
    const double *edge_weight = &data2[3*n_op];
    double *fluxes_a = &data3[5 * map0idx];
    double *fluxes_b = &data3[5 * map1idx];

    //inline function
    
      double ex = edge_weight[0];
      double ey = edge_weight[1];
      double ez = edge_weight[2];

      double p_a, pe_a;
      double3 momentum_a;
      p_a          = variables_a[VAR_DENSITY];
      momentum_a.x = variables_a[VAR_MOMENTUM+0];
      momentum_a.y = variables_a[VAR_MOMENTUM+1];
      momentum_a.z = variables_a[VAR_MOMENTUM+2];
      pe_a         = variables_a[VAR_DENSITY_ENERGY];

      double p_b, pe_b;
      double3 momentum_b;
      p_b          = variables_b[VAR_DENSITY];
      momentum_b.x = variables_b[VAR_MOMENTUM+0];
      momentum_b.y = variables_b[VAR_MOMENTUM+1];
      momentum_b.z = variables_b[VAR_MOMENTUM+2];
      pe_b         = variables_b[VAR_DENSITY_ENERGY];

      double p_a_val  = p_b + ex;
      double pe_a_val = pe_b + ey;
      double mx_a_val = momentum_b.x + ez;
      double my_a_val = momentum_b.y;
      double mz_a_val = momentum_b.z;

      double p_b_val = p_a;
      double pe_b_val = pe_a;
      double mx_b_val = momentum_a.x;
      double my_b_val = momentum_a.y;
      double mz_b_val = momentum_a.z;

      fluxes_a[VAR_DENSITY]  += p_a_val;
      fluxes_a[VAR_MOMENTUM+0] += mx_a_val;
      fluxes_a[VAR_MOMENTUM+1] += my_a_val;
      fluxes_a[VAR_MOMENTUM+2] += mz_a_val;
      fluxes_a[VAR_DENSITY_ENERGY] += pe_a_val;

      fluxes_b[VAR_DENSITY]  += p_b_val;
      fluxes_b[VAR_MOMENTUM+0] += mx_b_val;
      fluxes_b[VAR_MOMENTUM+1] += my_b_val;
      fluxes_b[VAR_MOMENTUM+2] += mz_b_val;
      fluxes_b[VAR_DENSITY_ENERGY] += pe_b_val;
    //end inline func
  }

}
