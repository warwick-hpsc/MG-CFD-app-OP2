Skeleton 2-1/2D Electromagnetic MPI Particle-in-Cell (PIC) codes
by Viktor K. Decyk
copyright 2000-2013, regents of the university of california

This program contains sample codes for illustrating the basic structure
of a 2-1/2D Electromagnetic MPI Particle-in-Cell (PIC) code, in both
Fortran and C. The codes have no diagnosics except for initial and final
energies.  Their primary purpose is to provide example codes for
physical science students learning about MPI PIC codes.  They are also
intended as benchmark reference codes to aid in developing new codes and
in evaluating new computer architectures.  A serial version of this code
with the same structure (bpic2) also exists, and can be compared to this
code in order to understand the parallel algorithms.

PIC codes are widely used in plasma physics.  They model plasmas as
particles which interact self-consistently via the electromagnetic
fields they themselves produce.  PIC codes generally have three
important procedures in the main iteration loop.  The first is the
deposit, where some particle quantity, such as a charge, is accumulated
on a grid via interpolation to produce a source density.  The second
important procedure is the field solver, which solves Maxwell’s equation
or a subset to obtain the electric and/or magnetic fields from the
source densities.  Finally, once the fields are obtained, the particle
forces are found by interpolation from the grid, and the particle
co-ordinates are updated, using Newton’s second law and the Lorentz
force.  The particle processing parts dominate over the field solving
parts in a typical PIC application. 

More details about PIC codes can be found in the texts by C. K. Birdsall
and A. B. Langdon, Plasma Physics via Computer Simulation, 1985,
R. W. Hockney and J. W. Eastwood, Computer Simulation Using Particles,
1981, and John M. Dawson, "Particle simulation of plasmas", Rev. Mod.
Phys. 55, 403 (1983).  Details about the mathematical equations and
units used in this code is given in the companion article,
"Description of Electromagnetic Spectral Code from the UPIC Framework"
by Viktor K. Decyk, UCLA, in the file EMModels.pdf.

Details abut MPI can be found in the book by William Gropp, Ewing Lusk,
and Anthony Skjellum, Using MPI: Portable Parallel Programming with the
Message-Passing Interface, The MIT Press, 1994.

No warranty for proper operation of this software is given or implied.
Software or information may be copied, distributed, and used at own
risk; it may not be distributed without this notice included verbatim
with each file.  If use of these codes results in a publication, an
acknowledgement is requested.

The code here uses the complete electromagnetic interaction, obtained by
solving Maxwell's equation.  A spectral method using Fast Fourier
Transforms (FFTs) is used to solve the Maxwell and Poisson equations.  A
real to complex FFT is used, and the data in Fourier space is stored in
a packed format, where the input and output sizes are the same.  The
boundary conditions are periodic, only electron species are included,
and linear interpolation is used.

For parallelization, the code uses a simple domain decomposition scheme,
where the field quantities (electric and magnetic fields, charge and
current density) are divided among the computational nodes.  The primary
decomposition divides the y values evenly, that is, each node has all
the x values for some y.  The particles are distributed so that the y
co-ordinates of the particles have a value within the domain.  This
simple decomposition works if the particles are uniformly distributed in
space.  Particles at the edge of the domain may need information from
the next domain in order to interpolate the fields.  To avoid
unnecessary communication, one extra guard cell in y is added at the end
of each domain that replicates the first y value in the next domain.
After particles are updated, some particles may move to a neighboring
domain.  A particle manager (PPMOVE2) is responsible for moving such
particles to the appropriate domain.  The FFT is performed in 3 steps.
In going from real space to Fourier space, the FFT is first performed in
x for the y values in the primary domain.  The data is then transposed
to a secondary domain decomposition, where each node has all the y
values for some x.  The FFT is then performed in the y direction for the
x values in the secondary domain.  Maxwell and Poisson equations are
solved using this secondary decomposition.  There are five main
communication procedures which use MPI.  The first two add the guard
cells for the charge and current densities, the third copies the guard
cells for the electric and magnetic fields.  The fourth is the particle
manager, and the fifth transposes the data between primary and secondary
decompositions using an all to all communication pattern.  Further
information about the domain decomposition parallel algorithms used can
be found in the companion presentation Dcomp.pdf and in the article:
p. c. liewer and v. k. decyk, j. computational phys. 85, 302 (1989).

Important differences between the relativistic push and deposit
procedures (in pbpush2.f and pbpush2.c) and the serial versions (in
bpush2.f and bpush2.c in the bpic2 directory) are highlighted in the
files dpbpush2_f.pdf and dpbpush2_c.pdf, respectively.

Differences between the main codes (pbpic2.f90 and pbpic2.c) and the
main codes in the serial versions in the bpic2 directory (bpic2.f90 and
bpic2.c) are highlighted in the files dpbpic2_f90.pdf and dpbpic2_c.pdf,
respectively.

Particles are initialized with a uniform distribution in space and a
gaussian distribution in velocity space.  This describes a plasma in
thermal equilibrium.  The inner loop contains a current and charge
deposit, add guard cell procedures, a vector and scalar FFT, a
transverse current procedure, Maxwell and Poisson solvers, vector FFTs,
copy guard cell procedures, a particle push, and a particle sorting
procedure.  The final energy and timings are printed.  A sample output
file for the default input parameters is included in the file output.

In more detail, the inner loop of the code contains the following
procedures in Fortran (C):

Deposit section:
   PPGRJPOST2L (cppgrjpost2l): relativistic current deposit, and update
                               position: x(t+dt/2)->x(t+dt)
   PPGJPOST2L (cppgjpost2l): deposit current density, and update
                             position: x(t+dt/2)->x(t+dt)
   PPMOVE2 (cppmove2): moves particles to appropriate processor from
                       from list supplied by PPGRJPOST2L or PPGJPOST2L
   PPGPOST2L (cppgpost2l): deposit charge density
   PPACGUARD2XL (cppacguard2xl): add current density guard cells in x on
                                 local processor
   PPNACGUARD2L (cppnacguard2l): add current density guard cells in y
                                 from remote processor
   PPAGUARD2XL (cppaguard2xl): add charge density guard cells in x on
                               local processor
   PPNAGUARD2L (cppnaguard2l): add charge density guard cells in y from
                               remote processor 

Field solve section:
   WPPFFT2R (cwppfft2r): FFT charge density to fourier space
   WPPFFT2R3 (cwppfft2r3): FFT current density to fourier space
   PPCUPERP2 (cppcuperp2): take transverse part of current
   IPPBPOISP23 (cippbpoisp23): calculate initial magnetic field in
                               fourier space
   PPMAXWEL2 (cppmaxwel2): update transverse electromagnetic fields in
                           fourier space
   PPPOIS23 (cppois23): calculate smoothed longitudinal electric field
                        in fourier space
   PPEMFIELD2 (cppemfield2): add smoothed longitudinal and transverse
                             electric fields
   PPEMFIELD2 (cppemfield2): copy smoothed magnetic field
   WPPFFT2R3 (cwppfft2r3): FFT smoothed electric field to real space
   WPPFFT2R3 (cwppfft2r3): FFT smoothed magnetic field to real space

Particle Push section:
   PPNCGUARD2L (cppncguard2l): fill in guard cells for smoothed electric
                               field in y from remote processor
   PPCGUARD2XL (cppcguard2xl): fill in guard cells for smoothed electric
                               field in x field on local processor
   PPNCGUARD2L (cppncguard2l): fill in guard cells for smoothed magnetic
                               field in y from remote processor
   PPCGUARD2XL (cppcguard2xl): fill in guard cells for smoothed magnetic
                               field in x field on local processor
   PPGRBPUSH23L (cppgrbpush23l): update relativistic particle
                                 co-ordinates with smoothed electric and
                                 magnetic fields:
                                 x(t)->x(t+dt/2); v(t-dt/2)->v(t+dt/2)
   PPGBPUSH23L (cppgbpush23l): update particle co-ordinates with
                               smoothed electric and magnetic fields:
                               x(t)->x(t+dt/2); v(t-dt/2)->v(t+dt/2)
   PPMOVE2 (cppmove2): moves particles to appropriate processor from
                       from list supplied by PPGRBPUSH23L or PPGBPUSH23L
   PPDSORTP2YL (cppdsortp2yl) : sort particles by cell

The inputs to the code are the grid parameters indx, indy, the particle
number parameters npx, npy, the time parameters tend, dt, and the
velocity paramters vtx, vty, vtz, vx0, vy0, vz0, the inverse speed of
light ci, the flag relativity, and the sorting parameter sortime.

In more detail:
indx = exponent which determines length in x direction, nx=2**indx.
indy = exponent which determines length in y direction, ny=2**indy.
   These ensure the system lengths are a power of 2.
npx = number of electrons distributed in x direction.
npy = number of electrons distributed in y direction.
   The total number of particles in the simulation is npx*npy.
tend = time at end of simulation, in units of plasma frequency.
dt = time interval between successive calculations.
   The number of time steps the code runs is given by tend/dt.
   dt should be less than .45*ci for the electromagnetic code.
vtx/vty/vtz = thermal velocity of electrons in x/y/z direction.
   a typical value is 1.0.
vx0/vy0/vz0 = drift velocity of electrons in x/y/z direction.
ci = reciprocal of velocity of light
relativity = (no,yes) = (0,1) = relativity is used
sortime = number of time steps between electron sorting.
   This is used to improve cache performance.  sortime=0 to suppress.

The major program files contained here include:
pbpic2.f90    Fortran90 main program 
pbpic2.c      C main program
pplib2.f      Fortran77 MPI communications library
pplib2_h.f90  Fortran90 MPI communications interface (header) library
pplib2.f90    Fortran90 MPI communications library
pplib2.c      C MPI communications library
pplib2.h      C MPI communications header library
pbpush2.f     Fortran77 procedure library
pbpush2_h.f90 Fortran90 procedure interface (header) library
pbpush2.c     C procedure library
pbpush2.h     C procedure header library
dtimer.c      C timer function, used by both C and Fortran

Files with the suffix .f90 adhere to the Fortran 90 standard, files with
the suffix .f adhere to the Fortran77 standard, files with the suffix .c
and .h adhere to the C99 standard.

The makefile is setup to use gcc and gfortran with Linux.  A version for
Mac OS X is also in the Makefile, but is commented out.  

Two executables can be created, fpbpic2 for Fortran, and cpbpic2 for C.

To compile the programs, execute:

Make program_name

where program_name is either: fpbpic2 or cpbpic2, or execute:

make

to create both programs.

To execute, type the name of the executable:

mpirun -np nproc ./program_name

where program_name is either fpbpic2 or cpbpic2, and
where nproc is the number of processors to be used.

There is one restriction on the number of processors which can be used:
this simple skeleton code does not support the case where MPI nodes have
zero grid points.  This special case can happen for certain combinations
of the grid size in y (set by the parameter indy) and the number of
processors chosen.  If this happens the code will exit with an error
message.  This special case will never occur if the grid size in y is an
exact multiple of the number of processors.

The file output contains the results produced for the default parameters.
Typical timing results are shown in the file fpbpic2_bench.pdf.

The Fortran version can be compiled to run with double precision by
changing the Makefile (typically by setting the compiler options flags
-r8).

The libraries pplib2.c and pbpush2.c contain wrapper functions to allow
the C libraries to be called from Fortran.  The libraries pplib2_f.c and
pbpush2_f.c contain wrapper functions to allow the Fortran libraries to
be called from C.
